name: Verifica√ß√£o de Pull Request

on:
  pull_request:
    branches: [ main, develop ]

jobs:
  # Verifica√ß√£o r√°pida para PRs
  pr-check:
    name: Verifica√ß√£o de PR
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout do c√≥digo
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: logoshub-app/package-lock.json
        
    - name: Instalar depend√™ncias
      run: |
        cd logoshub-app
        npm ci
        
    - name: Verificar formata√ß√£o
      run: |
        cd logoshub-app
        npm run format:check
        
    - name: Executar linting
      run: |
        cd logoshub-app
        npm run lint
        
    - name: Executar testes unit√°rios
      run: |
        cd logoshub-app
        npm run test:ci
        
    - name: Build de verifica√ß√£o
      run: |
        cd logoshub-app
        npm run build:prod
        
    - name: Verificar vulnerabilidades
      run: |
        cd logoshub-app
        npm audit --audit-level=high
        
    - name: Comentar no PR
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('‚úÖ Verifica√ß√£o de PR conclu√≠da')
          );
          
          const message = `‚úÖ **Verifica√ß√£o de PR conclu√≠da com sucesso!**
          
          - ‚úÖ Formata√ß√£o do c√≥digo verificada
          - ‚úÖ Linting executado sem erros
          - ‚úÖ Testes unit√°rios passaram
          - ‚úÖ Build de produ√ß√£o bem-sucedido
          - ‚úÖ Verifica√ß√£o de seguran√ßa conclu√≠da
          
          üöÄ **Pronto para merge!**`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: message
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: message
            });
          }
